#
# DSpace image - multistage build
#

#
# First step - Build DSpace
#

FROM openjdk:8-jre AS builder
MAINTAINER Alan Orth <alan.orth@gmail.com>

# Use a custom site name
ARG DSPACE_NAME="DSpace at My University"

# Allow custom DSpace hostname at build time (default to localhost if undefined)
# To override, pass --build-arg DSPACE_HOSTNAME=repo.example.org to docker build
ARG DSPACE_HOSTNAME=localhost

# Cater for environments where Tomcat is being reverse proxied via another HTTP
# server like nginx on port 80, for example. DSpace needs to know its publicly
# accessible URL for various places where it writes its own URL.
ARG DSPACE_PROXY_PORT=8080

# Allow custom Mirage2-based theme
ARG DSPACE_THEME=Mirage2

# Use a custom handle server prefix
ARG HANDLE_PREFIX=123456789

# Set mail server info
ARG MAIL_SERVER=smtp.example.com
ARG MAIL_USERNAME=""
ARG MAIL_PASSWORD=""
ARG MAIL_PORT=25
ARG MAIL_FROM_ADDR="dspace-noreply@myu.edu"
ARG MAIL_FEEDBACK_ADDR="dspace-help@myu.edu"
ARG MAIL_ADMIN_ADDR="dspace-help@myu.edu"
ARG MAIL_ALERT_ADDR=""
ARG MAIL_REG_ADDR=""

# Environment variables
ENV DSPACE_VERSION=5.7
ENV DSPACE_GIT_URL=https://github.com/DSpace/DSpace.git \
    DSPACE_GIT_REVISION=dspace-${DSPACE_VERSION} \
    DSPACE_HOME=/dspace \
    DSPACE_THEME=$DSPACE_THEME
ENV CATALINA_OPTS="-Xmx512M -Dfile.encoding=UTF-8" \
    MAVEN_OPTS="-XX:+TieredCompilation -XX:TieredStopAtLevel=1" \
    PATH=$DSPACE_HOME/bin:$PATH

WORKDIR /tmp

# Install runtime and dependencies
RUN apt-get update \
    && apt-get install -y \
    ant \
    maven \
    postgresql-client \
    git \
    imagemagick \
    ghostscript \
    openjdk-8-jdk-headless \
    cron \
    xmlstarlet \
    && rm -rf /var/lib/apt

# Add a non-root user to perform the Maven build. DSpace's Mirage 2 theme does
# quite a bit of bootstrapping with npm and bower, which fails as root. Also
# change ownership of DSpace and Tomcat install directories.
RUN useradd -r -s /bin/bash -m -d "$DSPACE_HOME" dspace \
    && chown -R dspace:dspace "$DSPACE_HOME"

   # Change to dspace user for build and install
USER dspace

# Clone DSpace source to $WORKDIR/dspace
RUN git clone --depth=1 --branch "$DSPACE_GIT_REVISION" "$DSPACE_GIT_URL" dspace

# Inject a dependency into the pom.xml for Maven 2.7+
RUN xmlstarlet ed --inplace -N x="http://maven.apache.org/POM/4.0.0" \
        -s "/x:project/x:build/x:pluginManagement/x:plugins/x:plugin[starts-with(x:artifactId,'maven-resources-plugin') and x:version > 2.6]" \
        -t elem -n "dependencies" \
        -s "/x:project/x:build/x:pluginManagement/x:plugins/x:plugin[starts-with(x:artifactId,'maven-resources-plugin') and x:version > 2.6]/dependencies" \
        -t elem -n "dependency" \
        -s "/x:project/x:build/x:pluginManagement/x:plugins/x:plugin[starts-with(x:artifactId,'maven-resources-plugin') and x:version > 2.6]/dependencies/dependency" \
        -t elem -n "groupId" -v "org.apache.maven.shared" \
        -s "/x:project/x:build/x:pluginManagement/x:plugins/x:plugin[starts-with(x:artifactId,'maven-resources-plugin') and x:version > 2.6]/dependencies/dependency" \
        -t elem -n "artifactId" -v "maven-filtering" \
        -s "/x:project/x:build/x:pluginManagement/x:plugins/x:plugin[starts-with(x:artifactId,'maven-resources-plugin') and x:version > 2.6]/dependencies/dependency" \
        -t elem -n "version" -v "1.3" \
        dspace/pom.xml


# Copy customized build.properties (taken straight from the DSpace source
# tree and modified only to add bits to make it easier to replace hostname
# and port below)
COPY config/build.properties dspace

# Set Custom values in build.properties
RUN sed -i -e "s/DSPACE_HOSTNAME/$DSPACE_HOSTNAME/" \
           -e "s/DSPACE_PROXY_PORT/$DSPACE_PROXY_PORT/" \
           -e "s/DSPACE_NAME/$DSPACE_NAME/" \
           -e "s/HANDLE_PREFIX/$HANDLE_PREFIX/" \
           -e "s/MAIL_SERVER/$MAIL_SERVER/" \
           -e "s/MAIL_USERNAME/$MAIL_USERNAME/" \
           -e "s/MAIL_PASSWORD/$MAIL_PASSWORD/" \
           -e "s/MAIL_PORT/$MAIL_PORT/" \
           -e "s/MAIL_FROM_ADDR/$MAIL_FROM_ADDR/" \
           -e "s/MAIL_FEEDBACK_ADDR/$MAIL_FEEDBACK_ADDR/" \
           -e "s/MAIL_ADMIN_ADDR/$MAIL_ADMIN_ADDR/" \
           -e "s/MAIL_ALERT_ADDR/$MAIL_ALERT_ADDR/" \
           -e "s/MAIL_REG_ADDR/$MAIL_REG_ADDR/" \
    dspace/build.properties

# Enable the Mirage 2 XMLUI theme
RUN sed -i 's#path="Mirage/"#path="'$DSPACE_THEME'/"#' dspace/dspace/config/xmlui.xconf

# Install user-supplied themes - long-term these should be included
#  in a custom DSpace git repo specified in ENV
COPY mirage2-themes dspace/dspace/modules/xmlui-mirage2/src/main/webapp/themes

# Build DSpace with Mirage 2 enabled
RUN cd dspace && mvn -Dmirage2.on=true package

# Install compiled applications to $CATALINA_HOME
RUN cd dspace/dspace/target/dspace-installer \
    && ant init_installation init_configs install_code copy_webapps

# Clean up the DSpace folder
RUN rm -rf "$DSPACE_HOME/.m2"

#
# Second step - create a runner image from the components we built in the first step
#

FROM tomcat:8.5 AS dspace

# Cater for environments where Tomcat is being reverse proxied via another HTTP
# server like nginx on port 80, for example. DSpace needs to know its publicly
# accessible URL for various places where it writes its own URL.
ARG DSPACE_PROXY_PORT=8080

# Allow custom Mirage2-based theme
ARG DSPACE_THEME=Mirage2

# Environment variables
ENV DSPACE_VERSION=5.7 \
    DSPACE_HOME=/dspace \
    DSPACE_THEME=$DSPACE_THEME
ENV CATALINA_OPTS="-Xmx512M -Dfile.encoding=UTF-8" \
    PATH=PATH=$CATALINA_HOME/bin:$DSPACE_HOME/bin:$PATH \
    RUN_HDL=no

WORKDIR /tmp

RUN useradd -r -s /bin/bash -m -d "$DSPACE_HOME" dspace

COPY --from=builder $DSPACE_HOME $DSPACE_HOME

RUN chown -R dspace:dspace "$DSPACE_HOME" "$CATALINA_HOME" \
    && rm -fr "$CATALINA_HOME/webapps" \
    && mv -f "$DSPACE_HOME/webapps" "$CATALINA_HOME" \
    && sed -i s/CONFIDENTIAL/NONE/ "$CATALINA_HOME"/webapps/rest/WEB-INF/web.xml

# Install runtime and dependencies
RUN apt-get update \
    && apt-get install -y \
    postgresql-client \
    imagemagick \
    ghostscript \
    cron \
    xmlstarlet \
    && rm -rf /var/lib/apt

# Tweak default Tomcat server configuration
COPY config/server.xml "$CATALINA_HOME"/conf/server.xml

# Adjust the Tomcat connector's proxyPort
RUN sed -i "s/DSPACE_PROXY_PORT/$DSPACE_PROXY_PORT/" "$CATALINA_HOME"/conf/server.xml

# Install root filesystem
COPY rootfs /

# Docker's COPY instruction always sets ownership to the root user, so we need
# to explicitly change ownership of those files and directories that we copied
# from rootfs.
RUN chown dspace:dspace $DSPACE_HOME $DSPACE_HOME/bin/* \
  && chown -R dspace:dspace $DSPACE_HOME/handle-server

# Make sure the crontab uses the correct DSpace directory
RUN sed -i "s#DSPACE=/dspace#DSPACE=$DSPACE_HOME#" /etc/cron.d/dspace-maintenance-tasks

# Disable assistive technology to fix issue with filter-media command and headless JDK
RUN sed -i "s/^assistive/#assistive/" /etc/java-8-openjdk/accessibility.properties
# TODO: try this CATALINA_OPT argument instead: -Djava.awt.headless=true

# Enable PDF thumbnails
RUN sed -i "s/Word Text Extractor, JPEG Thumbnail/Word Text Extractor, ImageMagick Image Thumbnail, ImageMagick PDF Thumbnail/" $DSPACE_HOME/config/dspace.cfg

RUN rm -fr /tmp/* /var/lib/apt/lists/* \
    && apt -y autoremove

WORKDIR $DSPACE_HOME

# Build info
RUN echo "Debian GNU/Linux `cat /etc/debian_version` image. (`uname -rsv`)" >> /root/.built && \
    echo "- with `java -version 2>&1 | awk 'NR == 2'`" >> /root/.built && \
    echo "- with DSpace $DSPACE_VERSION on Tomcat $TOMCAT_VERSION"  >> /root/.built && \
    echo "\nNote: if you need to run commands interacting with DSpace you should enter the" >> /root/.built && \
    echo "container as the dspace user, ie: docker exec -it -u dspace dspace /bin/bash" >> /root/.built

# Link the native APR library into java.library.path
RUN ln -s /usr/local/tomcat/native-jni-lib /usr/lib/jni

VOLUME ["/dspace/assetstore"]

EXPOSE 8080 8000 2641
# will run `start-dspace` script as root, then drop to dspace user
CMD ["start-dspace"]